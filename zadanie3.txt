import sqlite3

class UniversityDB:
    def __init__(self, db_name='university.db'):
        self.db_name = db_name
        self.conn = sqlite3.connect(self.db_name)
        self.cursor = self.conn.cursor()
        self.create_tables()
        self.populate_tables()

    def create_tables(self):
        # Создаем таблицы
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS Students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            surname TEXT NOT NULL,
            age INTEGER,
            city TEXT
        );
        ''')

        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS Courses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            time_start TEXT,
            time_end TEXT
        );
        ''')

        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS Student_courses (
            student_id INTEGER,
            course_id INTEGER,
            FOREIGN KEY (student_id) REFERENCES Students(id),
            FOREIGN KEY (course_id) REFERENCES Courses(id),
            PRIMARY KEY (student_id, course_id)
        );
        ''')

    def populate_tables(self):
        # Проверяем, есть ли данные
        self.cursor.execute('SELECT COUNT(*) FROM Students')
        if self.cursor.fetchone()[0] == 0:
            self.cursor.executemany('''
            INSERT INTO Courses (id, name, time_start, time_end)
            VALUES (?, ?, ?, ?)''', [
                (1, 'python', '21.07.21', '21.08.21'),
                (2, 'java', '13.07.21', '16.08.21')
            ])

            self.cursor.executemany('''
            INSERT INTO Students (id, name, surname, age, city)
            VALUES (?, ?, ?, ?, ?)''', [
                (1, 'Max', 'Brooks', 24, 'Spb'),
                (2, 'John', 'Stones', 15, 'Spb'),
                (3, 'Andy', 'Wings', 45, 'Manhester'),
                (4, 'Kate', 'Brooks', 34, 'Spb')
            ])

            self.cursor.executemany('''
            INSERT INTO Student_courses (student_id, course_id)
            VALUES (?, ?)''', [
                (1, 1),
                (2, 1),
                (3, 1),
                (4, 2)
            ])

            self.conn.commit()

    def execute_query(self, query, params=()):
        self.cursor.execute(query, params)
        return self.cursor.fetchall()

    def get_students_older_than_30(self):
        query = 'SELECT * FROM Students WHERE age > 30;'
        return self.execute_query(query)

    def get_students_on_python_course(self):
        query = '''
        SELECT s.* FROM Students s
        JOIN Student_courses sc ON s.id = sc.student_id
        JOIN Courses c ON sc.course_id = c.id
        WHERE c.name = 'python';
        '''
        return self.execute_query(query)

    def get_students_on_python_from_spb(self):
        query = '''
        SELECT s.* FROM Students s
        JOIN Student_courses sc ON s.id = sc.student_id
        JOIN Courses c ON sc.course_id = c.id
        WHERE c.name = 'python' AND s.city = 'Spb';
        '''
        return self.execute_query(query)

    def close(self):
        self.conn.close()


# Тестирование функционала
if __name__ == '__main__':
    db = UniversityDB()

    print("Студенты старше 30 лет:", db.get_students_older_than_30())
    print("Студенты на курсе Python:", db.get_students_on_python_course())
    print("Студенты на курсе Python из Spb:", db.get_students_on_python_from_spb())

    db.close()
